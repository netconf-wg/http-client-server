module ietf-http-client {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-http-client";
  prefix httpc;

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-tls-client {
    prefix tlsc;
    reference
      "RFC FFFF: YANG Groupings for TLS Clients and TLS Servers";
  }

  import ietf-uri {
    prefix uri;
    reference
      "RFC GGGG: YANG Groupings for HTTP Clients and HTTP Servers";
  }

  organization
    "IETF NETCONF (Network Configuration) Working Group";

  contact
    "WG Web:   https://datatracker.ietf.org/wg/netconf
     WG List:  NETCONF WG list <mailto:netconf@ietf.org>
     Author:   Kent Watsen <mailto:kent+ietf@watsen.net>";

  description
    "This module defines groupings for HTTP clients that can
     be used as a basis for specific HTTP client instances.

     Copyright (c) 2025 IETF Trust and the persons identified
     as authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC GGGG
     (https://www.rfc-editor.org/info/rfcGGGG); see the RFC
     itself for full legal notices.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.";

  revision YYYY-MM-DD {
    description
      "Initial version";
    reference
      "RFC GGGG: YANG Groupings for HTTP Clients and HTTP Servers";
  }

  // Features

  feature tls-supported {
    description
      "Indicates that the server supports configuring
       HTTP client certificates.";
    reference
      "RFC 9110: HTTP Semantics";
  }

  feature http1-supported {
    description
      "Indicates that the server supports configuring
       clients to use the HTTP/1.1 protocol.";
    reference
      "RFC 9112: HTTP/1.1";
  }

  feature http2-supported {
    description
      "Indicates that the server supports configuring
       clients to use the HTTP/2 protocol.";
    reference
      "RFC 9113: HTTP/2";
  }

  feature http3-supported {
    if-feature tls-supported;
    description
      "Indicates that the server supports configuring
       clients to use the HTTP/3 protocol.";
    reference
      "RFC 9114: HTTP/3";
  }

  feature proxy-connect {
    description
      "Indicates that the server supports configuring HTTP
       clients to connect to a remote HTTP server via a
       proxy, per Section 9.3.6 of RFC 9110.";
    reference
      "RFC 9110: HTTP Semantics";
  }

  // Grouping

  grouping http-client-grouping {
    description
      "A grouping for HTTP client level configuration. This grouping
       is not expected to be used with groupings for lower protocol
       layer (e.g., the 'tcp-client-grouping' found in RFC 9643), as
       equivalent information is encoded into the URI.";
    reference
      "RFC 9643: YANG Groupings for TCP Clients and TCP Servers";

    container uri {
      description
        "The URI, described in Section 3 of RFC 3986, the HTTP client
         establishes a connection to.";
      reference
        "RFC 3986  URI Generic Syntax";
      uses uri:uri;
    }

    container protocol-versions {
      presence
        "If unconfigured, then all versions are supported.";
      description
        "HTTP protocol versions the client supports.";
      typedef min-max-typedef {
        type enumeration {
          enum "HTTP/1" {
            if-feature http1-supported;
            description
              "Indicates that 'HTTP/1' has been configured.";
          }
          enum "HTTP/2" {
            if-feature http2-supported;
            description
              "Indicates that 'HTTP/2' has been configured.";
          }
          enum "HTTP/3" {
            if-feature http3-supported;
            description
              "Indicates that 'HTTP/3' has been configured.";
          }
        }
        description
          "A typedef used by the 'min' and 'max' leafs.";
      }
      leaf min {
        type min-max-typedef;
        mandatory true;
        description
          "The minimum protocol version supported.";
      }
      leaf max {
        type min-max-typedef;
        mandatory true;
        description
          "The maximum protocol version supported.";
      }
    }

    container tls-client-parameters {
      if-feature tls-supported;
      description
        "TLS client parameters, in case the URI scheme indicates
         the need for TLS.";
      uses tlsc:tls-client-grouping {
        refine server-authentication {
          presence
            "Indicates that TLS-client parameters have been
             configured. This statement is present so the
             mandatory descendant nodes do not imply that
             this node must be configured.";
        }
      }
    }

    container proxy-connect {
      if-feature proxy-connect;
      presence
        "Indicates that the HTTP-client connects through the
         configured proxy.";
      description
        "Configures how to connect to the proxy.";
      leaf protocol {
        type enumeration {
          enum CONNECT {
            description
              "Use the 'CONNECT' method described in Section 9.3.6
               of RFC 9110.";
            reference
              "RFC 9110: HTTP Semantics";
          }
          enum CONNECT-UDP {
            description
              "Use the 'connect-udp' upgrade token described in
               Section 3 of RFC 9298.";
            reference
              "RFC 9298: Proxying UDP in HTTP";
          }
        }
        mandatory true;
        description
          "The protocol to use when connecting to the proxy.";
      }
      leaf host {
        type inet:host;
        mandatory true;
        description
          "The 'Host' subcomponent, as described in Section 3.2.2 of
           RFC 3986, of the proxy.";
        reference
          "RFC 3986  URI Generic Syntax";
      }
      leaf port {
        type uint16;
        mandatory true;
        description
          "The 'Port' subcomponent, as described in Section 3.2.3 of
           RFC 3986, of the proxy.";
        reference
          "RFC 3986  URI Generic Syntax";
      }
    }
  }
}
